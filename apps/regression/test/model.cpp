#include "../model/model.h"

#include <apps/shared/global_context.h>
#include <apps/shared/store_context.h>
#include <assert.h>
#include <poincare/helpers.h>
#include <poincare/test/helper.h>
#include <poincare/trigonometry.h>
#include <quiz.h>
#include <string.h>

#include <array>

#include "../store.h"

using namespace Poincare;
using namespace Regression;

/* The data was generated by choosing X1 and the coefficients of the regression,
 * then filling Y1 with the regression formula + random()/10. */

void setRegressionPoints(Regression::Store* store, int series,
                         int numberOfPoints, const double* xi,
                         const double* yi = nullptr) {
  store->deleteAllPairsOfSeries(series);
  for (int i = 0; i < numberOfPoints; i++) {
    store->set(xi[i], series, 0, i);
    if (yi != nullptr) {
      store->set(yi[i], series, 1, i);
    }
  }
}

void assert_regression_is(const double* xi, const double* yi,
                          const int numberOfPoints, Model::Type modelType,
                          const double* trueCoefficients, double trueR,
                          double trueR2, double trueResidualStdDev,
                          bool acceptNAN = false) {
  int series = 0;
  Shared::GlobalContext globalContext;
  Model::Type regressionTypes[] = {Model::Type::None, Model::Type::None,
                                   Model::Type::None};
  Shared::DoublePairStorePreferences storePreferences;
  Regression::Store store(&globalContext, &storePreferences, regressionTypes);

  setRegressionPoints(&store, series, numberOfPoints, xi, yi);
  store.setSeriesRegressionType(series, modelType);
  Shared::StoreContext context(&store, &globalContext);

  double precision = 1e-2;
  // When expected value is null, expect a stronger precision
  double nullExpectedPrecision = 1e-9;

  // Compute and compare the coefficients
  double* coefficients = store.coefficientsForSeries(series, &context);
  int numberOfCoefs = store.modelForSeries(series)->numberOfCoefficients();
  for (int i = 0; i < numberOfCoefs; i++) {
    quiz_assert(roughly_equal(coefficients[i], trueCoefficients[i], precision,
                              acceptNAN, nullExpectedPrecision));
  }

  double r = store.correlationCoefficient(series);
  double r2 = store.determinationCoefficientForSeries(series, &globalContext);
  double sr = store.residualStandardDeviation(series, &globalContext);

  if (!Store::DisplayR(modelType)) {
    assert(std::isnan(r) && std::isnan(trueR));
  } else {
    quiz_assert(r >= -1.0 && r <= 1.0);
    quiz_assert(
        roughly_equal(r, trueR, precision, false, nullExpectedPrecision));
  }

  if (Store::DisplayR(modelType) && Store::DisplayRSquared(modelType)) {
    // Ensure r^2 is r*r
    quiz_assert(r * r == r2);
  }

  if (!Store::DisplayR2(modelType) && !Store::DisplayRSquared(modelType)) {
    assert(std::isnan(r2) && std::isnan(trueR2));
  } else {
    // Compute and check R2/r^2 value and sign
    quiz_assert(r2 <= 1.0 &&
                (r2 >= 0.0 || modelType == Model::Type::Proportional));
    quiz_assert(
        roughly_equal(r2, trueR2, precision, false, nullExpectedPrecision));
  }

  quiz_assert(roughly_equal(sr, trueResidualStdDev, precision, true,
                            nullExpectedPrecision));
}

QUIZ_CASE(regression_linear) {
  constexpr double x[] = {1.0, 8.0, 14.0, 79.0};
  constexpr double y[] = {-3.581, 20.296, 40.676, 261.623};
  constexpr double coefficientsAxpb[] = {3.4, -7.0};
  constexpr double coefficientsApbx[] = {-7.0, 3.4};
  constexpr double r = 1.0;
  constexpr double r2 = 1.0;
  constexpr double sr = 0.0425;
  assert_regression_is(x, y, 4, Model::Type::LinearAxpb, coefficientsAxpb, r,
                       r2, sr);
  assert_regression_is(x, y, 4, Model::Type::LinearApbx, coefficientsApbx, r,
                       r2, sr);
}

QUIZ_CASE(regression_linear_2) {
  constexpr double x[] = {-5.0, 2.0, 4.0, 5.6, 9.0};
  constexpr double y[] = {22.0, 1.0, 13.0, 28.36, 78.0};
  constexpr double coefficientsAxpb[] = {3.31824, 18.1191};
  constexpr double coefficientsApbx[] = {18.1191, 3.31824};
  constexpr double r = 0.5857;
  constexpr double r2 = 0.343;
  constexpr double sr = 27.642;
  assert_regression_is(x, y, 5, Model::Type::LinearAxpb, coefficientsAxpb, r,
                       r2, sr);
  assert_regression_is(x, y, 5, Model::Type::LinearApbx, coefficientsApbx, r,
                       r2, sr);
}

QUIZ_CASE(regression_proportional) {
  constexpr double x[] = {7.0, 5.0, 1.0, 9.0, 3.0};
  constexpr double y[] = {-41.4851, -29.62186, -6.454245, -53.4976, -18.03325};
  constexpr double coefficients[] = {-5.89};
  constexpr double r2 = 0.9999648161902982;
  constexpr double sr = 0.2852;
  assert_regression_is(x, y, 5, Model::Type::Proportional, coefficients, NAN,
                       r2, sr);
}

QUIZ_CASE(regression_proportional_2) {
  constexpr double x[] = {5.0, 2.0, 3.0, 4.0};
  constexpr double y[] = {10.0, 6.0, 7.0, 8.0};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {2.12963963};
  constexpr double r2 = 0.53227513227513223;
  constexpr double sr = 1.168;
  assert_regression_is(x, y, std::size(x), Model::Type::Proportional,
                       coefficients, NAN, r2, sr);
}

QUIZ_CASE(regression_proportional_3) {
  constexpr double x[] = {1.0, 2.0, 3.0, 4.0};
  constexpr double y[] = {0.0, 0.0, 0.0, 0.0};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {0.0};
  constexpr double r2 = 1.0;
  constexpr double sr = 0.0;
  assert_regression_is(x, y, std::size(x), Model::Type::Proportional,
                       coefficients, NAN, r2, sr);
}

QUIZ_CASE(regression_proportional_4) {
  constexpr double x[] = {-1.0, 0.0, 1.0};
  constexpr double y[] = {1.0, 1.0, 1.0};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {0.0};
  // Y is constant, and proportional regression cannot fit it, R2 is null.
  constexpr double r2 = 0.0;
  constexpr double sr = 1.2247;
  assert_regression_is(x, y, std::size(x), Model::Type::Proportional,
                       coefficients, NAN, r2, sr);
}

QUIZ_CASE(regression_proportional_5) {
  constexpr double x[] = {-1.0, 0.0, 1.0};
  constexpr double y[] = {1.0, 1.01, 1.0};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {0.0};
  /* In this case, proportional regression performed poorly compared to a
   * constant regression, R2 is negative. */
  constexpr double r2 = -45300.5;
  constexpr double sr = 1.2288;
  assert_regression_is(x, y, std::size(x), Model::Type::Proportional,
                       coefficients, NAN, r2, sr);
}

QUIZ_CASE(regression_quadratic) {
  constexpr double x[] = {-34.0, -12.0, 5.0, 86.0, -2.0};
  constexpr double y[] = {-8241.389, -1194.734, -59.163, -46245.39, -71.774};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {-6.50001, 21.3004, -3.15799};
  constexpr double r2 = 1.0;
  constexpr double sr = 0.02477;
  assert_regression_is(x, y, std::size(x), Model::Type::Quadratic, coefficients,
                       NAN, r2, sr);
}

QUIZ_CASE(regression_cubic) {
  constexpr double x[] = {-3.0, -2.8, -1.0, 0.0, 12.0};
  constexpr double y[] = {691.261, 566.498, 20.203, -12.865, -34293.21};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {-21.2015, 16.0141, 4.14522, -12.8658};
  constexpr double r2 = 1.0;
  constexpr double sr = 0.006858;
  assert_regression_is(x, y, std::size(x), Model::Type::Cubic, coefficients,
                       NAN, r2, sr);
}

QUIZ_CASE(regression_quartic) {
  constexpr double x[] = {1.6, 3.5, 3.5, -2.8, 6.4, 5.3, 2.9, -4.8, -5.7, 3.1};
  constexpr double y[] = {-112.667,  -1479.824, -1479.805, 1140.276, -9365.505,
                          -5308.355, -816.925,  5554.007,  9277.107, -1009.874};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {0.59998, -42.9998, 21.5015, 3.09232,
                                     -0.456824};
  constexpr double r2 = 1.0;
  constexpr double sr = 0.022338;
  assert_regression_is(x, y, std::size(x), Model::Type::Quartic, coefficients,
                       NAN, r2, sr);
}

QUIZ_CASE(regression_logarithmic) {
  constexpr double x1[] = {0.2, 0.5, 5.0, 7.0};
  constexpr double y1[] = {-11.952, -9.035, -1.695, -0.584};
  static_assert(std::size(x1) == std::size(y1), "Column sizes are different");
  constexpr double coefficients1[] = {-6.81679, 3.19383};
  constexpr double r1 = 1.0;
  constexpr double r21 = 1.0;
  constexpr double sr1 = 0.01879485;
  assert_regression_is(x1, y1, std::size(x1), Model::Type::Logarithmic,
                       coefficients1, r1, r21, sr1);

  constexpr double x2[] = {0.5, 1.0, 2.0, 3.0};
  constexpr double y2[] = {12.772, 10, 7.227, 5.606};
  static_assert(std::size(x2) == std::size(y2), "Column sizes are different");
  constexpr double coefficients2[] = {10.0, -4.0};
  constexpr double r2 = -1.0;
  constexpr double r22 = 1.0;
  constexpr double sr2 = 4.0359318E-4;
  assert_regression_is(x2, y2, std::size(x2), Model::Type::Logarithmic,
                       coefficients2, r2, r22, sr2);
}

QUIZ_CASE(regression_exponential) {
  constexpr double x[] = {5.5, 5.6, 5.7, 5.8, 5.9, 6.0};
  constexpr double y[] = {-276.842,  -299.956, -324.933,
                          -352.0299, -381.314, -413.0775};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {-3.4, 0.8};
  constexpr double r = 1.0;
  constexpr double r2 = 1.0;
  constexpr double sr = 0.0258;
  assert_regression_is(x, y, std::size(x), Model::Type::ExponentialAebx,
                       coefficients, r, r2, sr);
}

QUIZ_CASE(regression_exponential_2) {
  constexpr double x[] = {0, 1, 2, 3};
  constexpr double y[] = {3000, 3315.513, 3664.208, 4049.576};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {3000, .1};
  constexpr double r = 1.0;
  constexpr double r2 = 1.0;
  constexpr double sr = 2.149035E-4;
  assert_regression_is(x, y, std::size(x), Model::Type::ExponentialAebx,
                       coefficients, r, r2, sr);
}

QUIZ_CASE(regression_exponential_3) {
  constexpr double x[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  constexpr double y[] = {-1,           -.3678794,    -.1353353,    -.04978707,
                          -.01831564,   -.006737947,  -.002478752,  -.000911882,
                          -.0003354626, -.0001234098, -.00004539993};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {-1, -1};
  constexpr double r = -1.0;
  constexpr double r2 = 1.0;
  constexpr double sr = 1.67164E-8;
  assert_regression_is(x, y, std::size(x), Model::Type::ExponentialAebx,
                       coefficients, r, r2, sr);
}

QUIZ_CASE(regression_exponential_4) {
  constexpr double x[] = {1.0, 2.0, 3.0, 4.0};
  constexpr double y[] = {2.0, 3.0, 4.0, 1.0};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {3.4641, -0.179};
  constexpr double r = -0.3848;
  constexpr double r2 = 0.1481;
  constexpr double sr = 1.66167;
  assert_regression_is(x, y, std::size(x), Model::Type::ExponentialAebx,
                       coefficients, r, r2, sr);
}

QUIZ_CASE(regression_exponential_5) {
  constexpr double x[] = {1, 1, 2, 2};
  constexpr double y[] = {1, 2, 2, 1};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {1.41421, 0.0};
  constexpr double r = 0.0;
  constexpr double r2 = 0.0;
  constexpr double sr = 0.71744;
  assert_regression_is(x, y, std::size(x), Model::Type::ExponentialAebx,
                       coefficients, r, r2, sr);
}

QUIZ_CASE(regression_exponential_abx) {
  constexpr double x[] = {1, 2, 3, 4};
  constexpr double y[] = {2, 4, 8, 16};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {1, 2};
  constexpr double r = 1.0;
  constexpr double r2 = 1.0;
  constexpr double sr = 0.0;
  assert_regression_is(x, y, std::size(x), Model::Type::ExponentialAbx,
                       coefficients, r, r2, sr);
}

QUIZ_CASE(regression_power) {
  constexpr double x1[] = {1.0, 50.0, 34.0, 67.0, 20.0};
  constexpr double y1[] = {71.860, 2775514, 979755.1, 6116830, 233832.9};
  static_assert(std::size(x1) == std::size(y1), "Column sizes are different");
  constexpr double coefficients1[] = {71.8, 2.7};
  constexpr double r1 = 1.0;
  constexpr double r21 = 1.0;
  constexpr double sr1 = 373.1534;
  assert_regression_is(x1, y1, std::size(x1), Model::Type::Power, coefficients1,
                       r1, r21, sr1);

  constexpr double x2[] = {1.0, 2.0, 3.0, 4.0};
  constexpr double y2[] = {2.0, 3.0, 4.0, 1.0};
  static_assert(std::size(x2) == std::size(y2), "Column sizes are different");
  constexpr double coefficients2[] = {2.63994478, -0.22182701};
  constexpr double r2 = -0.2218;
  constexpr double r22 = 0.0492;
  constexpr double sr2 = 1.66825;
  assert_regression_is(x2, y2, std::size(x2), Model::Type::Power, coefficients2,
                       r2, r22, sr2);

  constexpr double x3[] = {0.5, 1.0, 2.0, 3.0};
  constexpr double y3[] = {-8.0, -2.0, -0.5, -0.2222222};
  static_assert(std::size(x3) == std::size(y3), "Column sizes are different");
  constexpr double coefficients3[] = {-2.0, -2.0};
  constexpr double r3 = -1.0;
  constexpr double r23 = 1.0;
  constexpr double sr3 = 1.03277E-7;
  assert_regression_is(x3, y3, std::size(x3), Model::Type::Power, coefficients3,
                       r3, r23, sr3);

  /* Check for approximations errors (here, since we take the ln of the column,
   * the variance of column y is not exactly evaluated to 0.0. Check that r is
   * properly computed.) */
  constexpr double x4[] = {1., 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
  constexpr double y4[] = {10.0, 10.0, 10.0, 10.0, 10.0,
                           10.0, 10.0, 10.0, 10.0, 10.0};
  static_assert(std::size(x4) == std::size(y4), "Column sizes are different");
  constexpr double coefficients4[] = {10.0, 0};
  constexpr double r4 = 1.0;
  constexpr double r24 = 1.0;
  constexpr double sr4 = 0.0;
  assert_regression_is(x4, y4, std::size(x4), Model::Type::Power, coefficients4,
                       r4, r24, sr4);
}

QUIZ_CASE(regression_median_0) {
  constexpr double x[] = {3.0, 3.0, 3.0};
  constexpr double y[] = {4.0, 3.0, 2.0};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {NAN, NAN};
  assert_regression_is(x, y, std::size(x), Model::Type::Median, coefficients,
                       NAN, NAN, NAN, true);
}

QUIZ_CASE(regression_median_1) {
  constexpr double x[] = {1.0, 2.0, 3.0};
  constexpr double y[] = {4.0, 3.0, 2.0};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {-1.0, 5.0};
  constexpr double sr = 0.0;
  assert_regression_is(x, y, std::size(x), Model::Type::Median, coefficients,
                       NAN, NAN, sr);
}

QUIZ_CASE(regression_median_2) {
  constexpr double x[] = {9.0,  7.0,  5.0,  11.0, 31.0,
                          19.0, 15.0, 25.0, 1.0,  23.0};
  constexpr double y[] = {11.0, 734.0, 3.0,  15.0, 55555.0,
                          31.0, 23.0,  43.0, -5.0, 39.0};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {2.0, -7.0};
  constexpr double sr = 19623.89656;
  assert_regression_is(x, y, std::size(x), Model::Type::Median, coefficients,
                       NAN, NAN, sr);
}

void assert_trigonometric_regression_is(
    const double* xi, const double* yi, int numberOfPoints,
    const double* trueCoefficients,
    Poincare::Preferences::AngleUnit trueCoeffcientsUnit,
    double residualStdDeviation) {
  // Test the trigonometric regression at all angle units
  const Preferences::AngleUnit previousAngleUnit =
      Preferences::SharedPreferences()->angleUnit();
  const Poincare::Preferences::AngleUnit units[3] = {
      Poincare::Preferences::AngleUnit::Radian,
      Poincare::Preferences::AngleUnit::Degree,
      Poincare::Preferences::AngleUnit::Gradian};
  for (int i = 0; i < 3; ++i) {
    Poincare::Preferences::AngleUnit unit = units[i];
    Poincare::Preferences::SharedPreferences()->setAngleUnit(unit);
    double unitFactor = Trigonometry::PiInAngleUnit(unit) /
                        Trigonometry::PiInAngleUnit(trueCoeffcientsUnit);
    // True coefficients b and c are converted to the tested angle unit
    double coefficientsUnit[] = {
        trueCoefficients[0], trueCoefficients[1] * unitFactor,
        trueCoefficients[2] * unitFactor, trueCoefficients[3]};
    assert_regression_is(xi, yi, numberOfPoints, Model::Type::Trigonometric,
                         coefficientsUnit, NAN, NAN, residualStdDeviation);
  }
  // Restore previous angleUnit
  Poincare::Preferences::SharedPreferences()->setAngleUnit(previousAngleUnit);
}

QUIZ_CASE(regression_trigonometric_1) {
  // double r2 = 0.9994216;
  constexpr double x[] = {1,   31,  61,  91,  121, 151, 181,
                          211, 241, 271, 301, 331, 361};
  constexpr double y[] = {9.24,  10.05, 11.33, 12.72, 14.16, 14.98, 15.14,
                          14.41, 13.24, 11.88, 10.54, 9.48,  9.19};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {2.9723, 0.016780, -1.3067, 12.146};
  constexpr double sr = 0.061848;
  assert_trigonometric_regression_is(x, y, std::size(x), coefficients,
                                     Poincare::Preferences::AngleUnit::Radian,
                                     sr);
}

QUIZ_CASE(regression_trigonometric_2) {
  // double r2 = 0.9154;
  constexpr double x[] = {0,  2,  4,  6,  8,  10, 12, 14, 16, 18, 20, 22, 24,
                          26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48};
  constexpr double y[] = {-2, -4, -5, -2, 3, 6, 8,  11, 9, 5, 2, 1, 0,
                          -3, -5, -2, 3,  5, 7, 10, 10, 5, 2, 2, 1};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {6.42, 0.26, -2.16, 2.82};
  constexpr double sr = 1.5093235;
  assert_trigonometric_regression_is(x, y, std::size(x), coefficients,
                                     Poincare::Preferences::AngleUnit::Radian,
                                     sr);
}

QUIZ_CASE(regression_trigonometric_3) {
  // double r2 = 0.9983;
  constexpr double x[] = {1, 2, 3, 4, 5, 6};
  constexpr double y[] = {8, 13, 21, 36, 47, 53};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double coefficients[] = {22.55, 0.5955, -2.180, 30.86};
  constexpr double sr = 1.2068486;
  assert_trigonometric_regression_is(x, y, std::size(x), coefficients,
                                     Poincare::Preferences::AngleUnit::Radian,
                                     sr);
}

QUIZ_CASE(regression_trigonometric_4) {
  // double r2 = 1.0;
  /* The regression fails with more than 89 data points. This happens because
   * the estimated frequency used to initialize coefficients is slightly off.
   * With more and more values, this error gets more and more important. At one
   * point, we are then unable to properly fit the curve. */
  constexpr int numberOfPoints = 89;
  double x[numberOfPoints];
  double y[numberOfPoints];
  for (int i = 0; i < numberOfPoints; i++) {
    x[i] = static_cast<double>(i);
    y[i] = std::sin(static_cast<double>(i));
  }
  constexpr double coefficients[] = {1.0, 1.0, 0.0, 0.0};
  constexpr double sr = 0.0;
  assert_trigonometric_regression_is(x, y, numberOfPoints, coefficients,
                                     Poincare::Preferences::AngleUnit::Radian,
                                     sr);
}

QUIZ_CASE(regression_trigonometric_4_bis) {
  // Check that values order does not matter
  constexpr int numberOfPoints = 89;
  double x[numberOfPoints];
  double y[numberOfPoints];
  for (int i = 0; i < numberOfPoints; i++) {
    x[i] = static_cast<double>(i);
    y[i] = std::sin(static_cast<double>(i));
  }
  /* Sort from lower to hight y. This is to check if the coefficients
   * initialization does not rely on the order of the values */
  double* context[2] = {x, y};
  Poincare::Helpers::Sort(
      [](int i, int j, void* context, int numberOfElements) {
        double** ctx = reinterpret_cast<double**>(context);
        double* x = ctx[0];
        double* y = ctx[1];
        double tempX = x[i];
        double tempY = y[i];
        x[i] = x[j];
        y[i] = y[j];
        x[j] = tempX;
        y[j] = tempY;
      },
      [](int i, int j, void* context, int numberOfElements) {
        double** ctx = reinterpret_cast<double**>(context);
        double* y = ctx[1];
        return y[i] >= y[j];
      },
      static_cast<void*>(context), numberOfPoints);
  constexpr double coefficients[] = {1.0, 1.0, 0.0, 0.0};
  constexpr double sr = 0.0;
  assert_trigonometric_regression_is(x, y, numberOfPoints, coefficients,
                                     Poincare::Preferences::AngleUnit::Radian,
                                     sr);
}

QUIZ_CASE(regression_logistic) {
  /* This data was generated without the random error, otherwise it did not pass
   * the test. */
  constexpr double x1[] = {2.3, 5.6, 1.1, 4.3};
  constexpr double y1[] = {3.948, 4.694, 2.184, 4.656};
  static_assert(std::size(x1) == std::size(y1), "Column sizes are different");
  constexpr double coefficients1[] = {6.0, 1.5, 4.7};
  constexpr double r21 = NAN;  // 0.9999999917270119;
  constexpr double sr1 = 9.49529E-5;
  assert_regression_is(x1, y1, std::size(x1), Model::Type::Logistic,
                       coefficients1, NAN, r21, sr1);

  constexpr double x2[] = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0};
  constexpr double y2[] = {5.0,   9.0,   40.0,  64.0,  144.0,
                           200.0, 269.0, 278.0, 290.0, 295.0};
  static_assert(std::size(x2) == std::size(y2), "Column sizes are different");
  constexpr double coefficients2[] = {64.9, 1.0, 297.4};
  constexpr double r22 = NAN;  // 0.9984396821656006;
  constexpr double sr2 = 7.672929;
  assert_regression_is(x2, y2, std::size(x2), Model::Type::Logistic,
                       coefficients2, NAN, r22, sr2);

  constexpr double x3[] = {-400.0, 0.0, 400.0, 450.0, 800.0};
  constexpr double y3[] = {1.523, 76.92, 819.8, 882.4, 996.0};
  static_assert(std::size(x3) == std::size(y3), "Column sizes are different");
  constexpr double coefficients3[] = {12.0, 0.01, 1000.0};
  constexpr double r23 = NAN;  // 1.0;
  constexpr double sr3 = 0.01945416;
  assert_regression_is(x3, y3, std::size(x3), Model::Type::Logistic,
                       coefficients3, NAN, r23, sr3);

  constexpr double x4[] = {-2.0, -1.0, 0.0, 1.0, 2.0, 3.0};
  constexpr double y4[] = {-5.0, -5.0, -4.99, -4.90, -3.56, -0.55};
  static_assert(std::size(x4) == std::size(y4), "Column sizes are different");
  constexpr double coefficients4[] = {0.001, -3.0, -5.0};
  constexpr double r24 = NAN;  // 1.0;
  constexpr double sr4 = 0.002416132;
  assert_regression_is(x4, y4, std::size(x4), Model::Type::Logistic,
                       coefficients4, NAN, r24, sr4);

  constexpr double x5[] = {3.0, 7.0, 11.0, 20.0, 43.0};
  constexpr double y5[] = {11.66, 13.51, 15.21, 17.38, 18.7};
  static_assert(std::size(x5) == std::size(y5), "Column sizes are different");
  constexpr double coefficients5[] = {0.88, 0.118, 18.8};
  constexpr double r25 = NAN;  // 1.0;
  constexpr double sr5 = 0.06274639;
  assert_regression_is(x5, y5, std::size(x5), Model::Type::Logistic,
                       coefficients5, NAN, r25, sr5);

  constexpr double x6[] = {-0.1, -0.09, -0.08, -0.07, -0.06};
  constexpr double y6[] = {1.82e-6, 3.66e-6, 7.34e-6, 1.46e-5, 2.91e-5};
  static_assert(std::size(x6) == std::size(y6), "Column sizes are different");
  constexpr double coefficients6[] = {1.17e-8, 250.0,
                                      2.77e-5};  // target : {0.5, 70.0, 0.001};
  constexpr double r26 = NAN;  // 0.902321;               // target : 1.0;
  constexpr double sr6 = 4.9002082E-6;
  assert_regression_is(x6, y6, std::size(x6), Model::Type::Logistic,
                       coefficients6, NAN, r26, sr6);

  constexpr double x7[] = {1.0, 3.0, 4.0, 6.0, 8.0};
  constexpr double y7[] = {4.0, 4.0, 0.0, 58.0, 5.0};
  static_assert(std::size(x7) == std::size(y7), "Column sizes are different");
  constexpr double coefficients7[] = {3.56e8, 4.256, 31.4};  // No target
  constexpr double r27 = NAN;  // 0.4;  // No target (But should be positive)
  constexpr double sr7 = 26.88173;
  assert_regression_is(x7, y7, std::size(x7), Model::Type::Logistic,
                       coefficients7, NAN, r27, sr7);
}

// Testing column and regression calculation

void assert_column_calculations_is(const double* xi, int numberOfPoints,
                                   double trueMean, double trueSum,
                                   double trueSquaredSum,
                                   double trueStandardDeviation,
                                   double trueVariance) {
  int series = 0;
  Shared::GlobalContext globalContext;
  Shared::DoublePairStorePreferences storePreferences;
  Model::Type regressionTypes[] = {Model::Type::None, Model::Type::None,
                                   Model::Type::None};
  Regression::Store store(&globalContext, &storePreferences, regressionTypes);

  setRegressionPoints(&store, series, numberOfPoints, xi);

  // Compute and compare the regression calculations metrics
  double mean = store.meanOfColumn(series, 0);
  double sum = store.sumOfColumn(series, 0);
  double squaredSum = store.squaredValueSumOfColumn(series, 0);
  double standardDeviation = store.standardDeviationOfColumn(series, 0);
  double variance = store.varianceOfColumn(series, 0);

  // Check that squaredSum, standardDeviation and variance are positive
  quiz_assert(squaredSum >= 0.0);
  quiz_assert(standardDeviation >= 0.0);
  quiz_assert(variance >= 0.0);

  double precision = 1e-3;
  // Observed should be exactly 0 if expected value is null.
  quiz_assert(roughly_equal(variance, trueVariance, precision, false, 0.0));
  quiz_assert(roughly_equal(squaredSum, trueSquaredSum, precision, false, 0.0));
  quiz_assert(roughly_equal(mean, trueMean, precision, false, 0.0));
  quiz_assert(roughly_equal(sum, trueSum, precision, false, 0.0));
  quiz_assert(roughly_equal(standardDeviation, trueStandardDeviation, precision,
                            false, 0.0));
}

QUIZ_CASE(regression_column_calculation) {
  constexpr double x[] = {2.3, 5.6, 1.1, 4.3};
  constexpr double mean = 3.325;
  constexpr double sum = 13.3;
  constexpr double squaredSum = 56.35;
  constexpr double standardDeviation = 1.741228;
  constexpr double variance = 3.031875;
  assert_column_calculations_is(x, std::size(x), mean, sum, squaredSum,
                                standardDeviation, variance);
}

QUIZ_CASE(regression_constant_column_calculation) {
  // This data produced a negative variance before
  constexpr double x[] = {-996.85840734641, -996.85840734641, -996.85840734641};
  constexpr double mean = -996.85840734641;
  constexpr double sum = -2990.57522203923;
  constexpr double squaredSum = 2981180.0528916633;
  constexpr double standardDeviation = 0.0;
  constexpr double variance = 0.0;
  assert_column_calculations_is(x, std::size(x), mean, sum, squaredSum,
                                standardDeviation, variance);
}

void assert_regression_calculations_is(const double* xi, const double* yi,
                                       int numberOfPoints,
                                       double trueCovariance,
                                       double trueProductSum, double trueR) {
  int series = 0;
  Shared::GlobalContext globalContext;
  Shared::DoublePairStorePreferences storePreferences;
  Model::Type regressionTypes[] = {Model::Type::None, Model::Type::None,
                                   Model::Type::None};
  Regression::Store store(&globalContext, &storePreferences, regressionTypes);

  setRegressionPoints(&store, series, numberOfPoints, xi, yi);

  double precision = 1e-3;

  // Compute and compare the regression calculations metrics
  double covariance = store.covariance(series);
  double productSum = store.columnProductSum(series);

  // NOTE : A reasonable nullExpectedPrecision for future tests
  quiz_assert(roughly_equal(covariance, trueCovariance, precision, false, 0.0));
  quiz_assert(roughly_equal(productSum, trueProductSum, precision, false, 0.0));

  if (!std::isnan(trueR)) {
    double r = store.correlationCoefficient(series);
    quiz_assert(r >= -1.0 && r <= 1.0);
    quiz_assert(roughly_equal(r, trueR, precision, false, 0.0));
  }
}

QUIZ_CASE(regression_calculation) {
  constexpr double x[] = {1.0, 50.0, 34.0, 67.0, 20.0};
  constexpr double y[] = {71.860, 2775514, 979755.1, 6116830.0, 233832.9};
  static_assert(std::size(x) == std::size(y), "Column sizes are different");
  constexpr double covariance = 4.7789036e7;
  constexpr double productSum = 586591713.26;
  constexpr double r = 0.919088;
  assert_regression_calculations_is(x, y, std::size(x), covariance, productSum,
                                    r);
}
