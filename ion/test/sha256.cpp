#include <quiz.h>
#include <ion.h>
#include <assert.h>

void computeSha256AndCompare(const uint8_t * message, uint64_t dataLength, uint8_t * expected) {
  uint8_t digest[Ion::Sha256DigestBytes];
  Ion::sha256(message, dataLength, digest);
  quiz_assert(memcmp(digest, expected, Ion::Sha256DigestBytes) == 0);
}

QUIZ_CASE(ion_sha256) {
  // Empty Message
  {
    constexpr int messageSize = 1;
    uint8_t message[messageSize] = "";
    uint8_t expected[Ion::Sha256DigestBytes] = {
      0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
      0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
      0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
      0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55
    };
    computeSha256AndCompare(message, messageSize - 1 , expected);
  }
  // 1 chunk
  {
    constexpr int messageSize = 44;
    uint8_t message[messageSize] = "The quick brown fox jumps over the lazy dog";
    uint8_t expected[Ion::Sha256DigestBytes] = {
      0xd7, 0xa8, 0xfb, 0xb3, 0x07, 0xd7, 0x80, 0x94,
      0x69, 0xca, 0x9a, 0xbc, 0xb0, 0x08, 0x2e, 0x4f,
      0x8d, 0x56, 0x51, 0xe4, 0x6d, 0x3c, 0xdb, 0x76,
      0x2d, 0x02, 0xd0, 0xbf, 0x37, 0xc9, 0xe5, 0x92
    };
    computeSha256AndCompare(message, messageSize - 1, expected);
  }
  // 1 chunk, maximal message size
  {
    constexpr int messageSize = 56;
    uint8_t message[messageSize] = "The quick brown fox jumps over the lazy dog567890123456";
    uint8_t expected[Ion::Sha256DigestBytes] = {
      0x82, 0x0b, 0x15, 0xbf, 0x7c, 0x05, 0x9e, 0xcb,
      0xd5, 0x20, 0x45, 0x8f, 0xbb, 0xd7, 0x3c, 0x35,
      0x09, 0x14, 0xab, 0x38, 0x21, 0xef, 0x4d, 0xb9,
      0x40, 0x65, 0x90, 0x45, 0xbd, 0x55, 0x6c, 0x9c
    };
    computeSha256AndCompare(message, messageSize - 1, expected);
  }
  // 2 chunks, minimal message size
  {
    constexpr int messageSize = 57;
    uint8_t message[messageSize] = "The quick brown fox jumps over the lazy dog5678901234567";
    uint8_t expected[Ion::Sha256DigestBytes] = {
      0x1e, 0x93, 0xfd, 0xe7, 0x8e, 0xa8, 0x59, 0x32,
      0xe4, 0x6d, 0xda, 0xec, 0xe6, 0xe5, 0xcb, 0xbc,
      0x21, 0xdb, 0xbf, 0xe3, 0xa5, 0x09, 0xaa, 0x83,
      0xc5, 0xeb, 0xea, 0x7e, 0xb5, 0xa9, 0x63, 0x86
    };
    computeSha256AndCompare(message, messageSize - 1, expected);
  }
  // 2 chunks, only dataLenght in chunk 2
  {
    constexpr int messageSize = 64;
    uint8_t message[messageSize] = "The quick brown fox jumps over the lazy dog56789012345678901234";
    uint8_t expected[Ion::Sha256DigestBytes] = {
      0x16, 0x5a, 0x4f, 0xdd, 0x55, 0x44, 0xe8, 0x65,
      0x30, 0x30, 0x94, 0x7c, 0x71, 0xc6, 0x7f, 0x20,
      0x47, 0x4d, 0x4f, 0xc5, 0xd7, 0xb6, 0xd7, 0x01,
      0x96, 0x95, 0x67, 0xd3, 0x06, 0x17, 0xdf, 0x5d
    };
    computeSha256AndCompare(message, messageSize - 1, expected);
  }
  // 2 chunks, only data in chunk 1
  {
    constexpr int messageSize = 65;
    uint8_t message[messageSize] = "The quick brown fox jumps over the lazy dog567890123456789012345";
    uint8_t expected[Ion::Sha256DigestBytes] = {
      0x99, 0xde, 0x09, 0x15, 0xef, 0x01, 0x07, 0x1d,
      0x9a, 0x9d, 0xd4, 0x0a, 0xd8, 0x1a, 0x35, 0x36,
      0x14, 0x9b, 0xee, 0x04, 0x26, 0xb8, 0x91, 0x43,
      0xf4, 0xe4, 0x21, 0x34, 0x73, 0x0d, 0xe7, 0x69
    };
    computeSha256AndCompare(message, messageSize - 1, expected);
  }
  // 2 chunks
  {
    constexpr int messageSize = 87;
    uint8_t message[messageSize] = "The quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dog";
    uint8_t expected[Ion::Sha256DigestBytes] = {
      0xcc, 0xe9, 0x70, 0x87, 0xf4, 0x77, 0xac, 0xaf,
      0xa6, 0x0f, 0x6e, 0x74, 0xbf, 0xe5, 0xdd, 0x17,
      0xd9, 0xd0, 0x99, 0xb8, 0x7f, 0xb9, 0x3a, 0x2f,
      0xb7, 0x79, 0xdb, 0xb5, 0x27, 0xa0, 0x8f, 0xe7
    };
    computeSha256AndCompare(message, messageSize - 1, expected);
  }
  // 3 chunks
  {
    constexpr int messageSize = 154;
    uint8_t message[messageSize] = "T     h     i     s          m     e     s     s     a     g     e          n     e     e     d     s          3          c     h     u     n     k     s";
    uint8_t expected[Ion::Sha256DigestBytes] = {
      0x83, 0xff, 0x32, 0x3f, 0x8a, 0xee, 0x8f, 0x58,
      0x18, 0x4e, 0xc5, 0xcb, 0xca, 0x05, 0x83, 0xd2,
      0x0c, 0xfd, 0xe3, 0xab, 0xb0, 0x57, 0xce, 0xb0,
      0xf0, 0x47, 0xd7, 0xe7, 0x0f, 0x60, 0x80, 0xc1
    };
    computeSha256AndCompare(message, messageSize - 1, expected);
  }
}
